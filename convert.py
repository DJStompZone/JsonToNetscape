import json
import argparse
import sys
from pathlib import Path



def bool_to_string(value: bool) -> str:
    return "TRUE" if value else "FALSE"


def check_tail_match(domain: str) -> str:
    return "TRUE" if domain.startswith('.') else "FALSE"


def load_cookies(path: Path) -> list[dict]:
    with path.open("r", encoding="utf-8") as f:
        raw = json.load(f)
        if not isinstance(raw, dict) or "cookies" not in raw:
            raise ValueError(f"Invalid format: expected a top-level 'cookies' key in {path}")
        cookies = raw["cookies"]
        if not isinstance(cookies, list):
            raise ValueError(f"Invalid format: 'cookies' must be a list in {path}")
        return cookies


def convert_cookie_json_to_netscape_format(input_path: str, output_path: str) -> None:
    input_file = Path(input_path)
    output_file = Path(output_path)

    cookies = load_cookies(input_file)

    header = (
        "# Netscape HTTP Cookie File\n"
        "# https://curl.haxx.se/docs/http-cookies.html\n"
        "# This file was generated by libcurl! Edit at your own risk.\n\n"
    )

    with output_file.open("w", encoding="utf-8") as f:
        f.write(header)
        for c in cookies:
            prefix = "#HttpOnly_" if c.get("httpOnly") else ""
            f.write(
                f"{prefix}{c['domain']}\t"
                f"{'TRUE' if c['domain'].startswith('.') else 'FALSE'}\t"
                f"{c['path']}\t"
                f"{'TRUE' if c.get('secure') else 'FALSE'}\t"
                f"{int(c.get('expirationDate', 0))}\t"
                f"{c['name']}\t"
                f"{c['value']}\n"
            )


def main():
    parser = argparse.ArgumentParser(
        description="Convert a JSON cookie file to Netscape HTTP Cookie format."
    )
    parser.add_argument(
        "input", help="Path to the JSON cookie file (e.g., exported from browser)."
    )
    parser.add_argument(
        "output", help="Path to save the Netscape-compatible cookie file."
    )
    args = parser.parse_args()

    convert_cookie_json_to_netscape_format(args.input, args.output)


if __name__ == "__main__":
    main()
